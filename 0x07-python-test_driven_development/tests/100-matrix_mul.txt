"""
Test cases for the matrix_mul function.

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

# Test with valid matrices
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

# Test with matrices containing floats
>>> matrix_mul([[1.5, 2.5], [3.5, 4.5]], [[1.0, 2.0], [3.0, 4.0]])
[[9.0, 13.0], [15.0, 22.0]]

# Test with single element matrices
>>> matrix_mul([[2]], [[3]])
[[6]]

# Test with incompatible matrices (should raise ValueError)
>>> matrix_mul([[1, 2, 3]], [[4, 5], [6, 7]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

# Test with empty matrices (should raise ValueError)
>>> matrix_mul([], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

>>> matrix_mul([[1, 2], [3, 4]], [])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

# Test with non-list inputs (should raise TypeError)
>>> matrix_mul(123, [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

>>> matrix_mul([[1, 2], [3, 4]], "string")
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

# Test with non-list of lists (should raise TypeError)
>>> matrix_mul([1, 2, 3], [[4, 5], [6, 7]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2], [3, 4]], [5, 6])
Traceback (most recent call last):
    ...
TypeError: m_b must be a list of lists

# Test with non-rectangular matrices (should raise TypeError)
>>> matrix_mul([[1, 2, 3], [4, 5]], [[1, 2], [3, 4]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

>>> matrix_mul([[1, 2], [3, 4]], [[1], [2, 3]])
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size
"""
